// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  username     String
  password     String
  mainFolder   MainFolder @relation("createdBy", fields: [mainFolderId], references: [id])
  mainFolderId Int        @unique
}

model MainFolder {
  id         Int      @id @default(autoincrement())
  user       User?    @relation("createdBy")
  subFolders Folder[] @relation("masterFolder")
  files      File[]   @relation("masterFiles")
}

model Folder {
  id           Int         @id @default(autoincrement())
  name         String
  files        File[]      @relation("insideFolder")
  mainFolder   MainFolder? @relation("masterFolder", fields: [mainFolderId], references: [id])
  mainFolderId Int?
  subFolders   Folder[]    @relation("ParentChild")
  parentFolder Folder?     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId     Int?
}

model File {
  id           Int         @id @default(autoincrement())
  name         String
  size         Int
  createdAt    DateTime    @default(now())
  url          String
  Folder       Folder?     @relation("insideFolder", fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId     Int?
  mainFolder   MainFolder? @relation("masterFiles", fields: [mainFolderId], references: [id])
  mainFolderId Int?
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(255) // MediumText may be needed for MySql
  expiresAt DateTime
}
